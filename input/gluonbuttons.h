#ifndef GLUONBUTTONS_H
#define GLUONBUTTONS_H

#include "gluon_input_export.h"

#include "core/singleton.h"
#include "gluondevices.h"

#include <QtCore/QObject>

class QString;

namespace GluonInput 
{
	class GLUON_INPUT_EXPORT GluonButtons : public GluonCore::Singleton<GluonButtons>
	{
		Q_OBJECT
		Q_ENUMS(KeyboardButton)
		Q_ENUMS(MouseAxis)
		Q_ENUMS(MouseButton)
		Q_ENUMS(JoystickAxis)
		Q_ENUMS(JoystickButton)
		public:
			enum KeyboardButton
			{
				A,
				B,
				C,
				D,
				E,
				F,
				G,
				H,
				I,
				J,
				K,
				L,
				M,
				N,
				O,
				P,
				Q,
				R,
				S,
				T,
				U,
				V,
				W,
				X,
				Y,
				Z,
				ONE,
				TWO,
				THREE,
				FOUR,
				FIVE,
				SIX,
				SEVEN,
				EIGHT,
				NINE,
				ZERO,
				RETURN,
				ESC,
				DEL,
				TAB,
				SPACE,
				MINUS,
				EQUAL,
				LEFT_BRACKET,
				RIGHT_BRACKET,
				QUOTE,
				NON_US_HASH_AND_TILDE,
				SEMICOLON,
				APOSTROPHE,
				GRAVE_ACCENT_ANF_TILDE,
				COMMA,
				PUNCTUATION,
				SLASH,
				CAPS_LOCK,
				F_ONE,
				F_TWO,
				F_THREE,
				F_FOUR,
				F_FIVE,
				F_SIX,
				F_SEVEN,
				F_EIGHT,
				F_NINE,
				F_TEN,
				F_ELEVEN,
				F_TWELVE,
				PRINTSCREEN,
				SCROLL,
				PAUSE,
				INSERT,
				HOME,
				PAGEUP,
				DELETE_FORWARD,
				END,
				PAGEDOWN,
				RIGHT_ARROW,
				LEFT_ARROW,
				DOWN_ARROW,
				UP_ARROW,
				KEYPAD_NUM_LOCK_AND_CLEAR,
				Keypad_SLASH,
				KEYPARD_STAR,
				KEYPAD_MINUS,
				KEYPAD_PLUS,
				KEYPAD_ENTER,
				KEYPAD_ONE,
				KEYPAD_TWO,
				KEYPAD_THREE,
				KEYPAD_FOUR,
				KEYPAD_FIVE,
				KEYPAD_SIX,
				KEYPAD_SEVEN,
				KEYPAD_EIGHT,
				KEYPAD_NINE,
				KEYPAD_ZERO,
				KEYPAD_PUNCTUATION_AND_DELETE,
				NON_US_BACKSLASH_AND_PIPE,
				APPLICATION,
				POWER,
				KEYPAD_EQUAL,
				F_THIRTEEN,
				F_FOURTEEN,
				F_FIFTEEN,
				F_SIXTEEN,
				F_SEVENTEEN,
				F_EIGHTTEEN,
				F_NINETEEN,
				F_TWENTY,
				F_TWENTYONE,
				F_TWENTYTWO,
				F_TWENTYTHREE,
				F_TWENTYFOUR,
				EXECUTE,
				HELP,
				MENU,
				SELECT,
				STOP,
				AGAIN,
				UNDO,
				CUT,
				COPY,
				PASTE,
				FIND,
				MUTE,
				VOLUME_UP,
				VOLUME_DOWN,
				LOCKING_CAPS_LOCK,
				LOCKING_NUM_LOCK,
				LOCKING_SCROLL_LOCK,
				KEYPAD_COMMA,
				KEYPAD_EQUAL_SIGN,
				INTERNATIONAL_ONE,
				INTERNATIONAL_TWO,
				INTERNATIONAL_THREE,
				INTERNATIONAL_FOUR,
				INTERNATIONAL_FIVE,
				INTERNATIONAL_SIX,
				INTERNATIONAL_SEVEN,
				INTERNATIONAL_EIGHT,
				INTERNATIONAL_NINE,
				LANG_ONE,
				LANG_TWO,
				LANG_THREE,
				LANG_FOUR,
				LANG_FIVE,
				LANG_SIX,
				LANG_SEVEN,
				LANG_EIGHT,
				LANG_NINE,
				ALTERNATE_ERASE,
				SYSREG_AND_ATTENTION,
				CANCEL,
				CLEAR,
				PROPR,
				RETURN_SECOND,
				SEPARATOR,
				OUT,
				OPER,
				CLEAR_AND_AGAIN,
				CRSEL_AND_PROPS,
				EXSEL,
				KEYPAD_ZEROZERO,
				KEYPAD_ZEROZEROZERO,
				THOUSANDS_SEPARATOR,
				DECIMAL_SEPARATOR,
				CURRENCY_UNIT,
				CURRENCY_SUBUNIT,
				KEYPAD_LEFT_PARENTHESE,
				KEYPAD_RIGHT_PARENTHESE,
				KEYPAD_LEFT_CURLY_BRACKET,
				KEYPAD_RIGHT_CURLY_BRACKET,
				TAB_SECOND,
				BACKSPACE,
				KEYPAD_A,
				KEYPAD_B,
				KEYPAD_C,
				KEYPAD_D,
				KEYPAD_E,
				KEYPAD_F,
				KEYPAD_XOR,
				KEYPAD_CARET,
				KEYPAD_PROCENT,
				KEYPAD_LESSTHAN,
				KEYPAD_GREATERTHAN,
				KEYPAD_AMPERSAND,
				KEYPAD_AMPERSANDAMPERSAND,
				KEYPAD_PIPE,
				KEYPAD_PIPEPIPE,
				KEYPAD_COLON,
				KEYPAD_HASH,
				KEYPAD_SPACE,
				KEYPAD_AT,
				KEYPAD_EXCLAMATION_MARK,
				KEYPAD_MEMORY_STORE,
				KEYPAD_MEMORY_RECALL,
				KEYPAD_MEMORY_CLEAR,
				KEYPAD_MEMORY_ADD,
				KEYPAD_MEMORY_SUBTRACT,
				KEYPAD_MEMORY_MULTIPLY,
				KEYPAD_MEMORY_DIVIDE,
				KEYPAD_PLUS_AND_MINUS,
				KEYPAD_CLEAR,
				KEYPAD_CLEAR_ENTRY,
				KEYPAD_BINARY,
				KEYPAD_OCTAL,
				KEYPAD_DECIMAL,
				KEYPAD_HEXADECIMAL,
				LEFT_CTRL,
				LEFT_SHIFT,
				LEFT_ALT,
				LEFT_GUI,
				RIGHT_CTRL,
				RIGHT_SHIFT,
				RIGHT_ALT,
				RIGHT_GUI
			};
		
			enum MouseAxis
			{
				MOUSE_X,
				MOUSE_Y,
				MOUSE_Z,
				MOUSE_WHEEL,
				MOUSE_HWHEEL
			};
		
			enum JoystickAxis
			{
				JOYSTICK_X,
				JOYSTICK_Y,
				JOYSTICK_Z,
				JOYSTICK_ROTATION_X_AXIS,
				JOYSTICK_ROTATION_Y_AXIS,
				JOYSTICK_ROTATION_Z_AXIS,
				JOYSTICK_DIAL,
				JOYSTICK_HAT_SWITCH,
				JOYSTICK_XTILT,
				JOYSTICK_YTILT,
				JOYSTICK_RUDDER,
				JOYSTICK_THROTTLE,
				JOYSTICK_GAS,
				JOYSTICK_BRAKE
			};
			
			enum MouseButton
			{
				MOUSE_LEFT_BUTTON,
				MOUSE_RIGHT_BUTTON,
				MOUSE_MIDDLE_BUTTON,
				MOUSE_BUTTON_FOUR,
				MOUSE_BUTTON_FIVE,
				MOUSE_BUTTON_SIX,
				MOUSE_BUTTON_SEVEN,
				MOUSE_BUTTON_EIGHT,
			};
			
			enum JoystickButton
			{
				BUTTON_ONE,
				BUTTON_TWO,
				BUTTON_THREE,
				BUTTON_FOUR,
				BUTTON_FIVE,
				BUTTON_SIX,
				BUTTON_SEVEN,
				BUTTON_EIGHT,
				BUTTON_NINE
			};
		
			GluonButtons();
		
			QString buttonName(DeviceFlag deviceType , int code);
			QString axisName(DeviceFlag deviceType, int code);
		
		private:
			~GluonButtons();
	};
}	

#endif